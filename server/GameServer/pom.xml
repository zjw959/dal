<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>phanta.dal</groupId>
		<artifactId>DAL</artifactId>
		<version>1.0.0</version>
	</parent>
	<packaging>jar</packaging>
	<artifactId>GameServer</artifactId>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<!-- 启动文件模板 -->
		<start.template.file>src/main/resources/start.py</start.template.file>
		<!-- 版本文件模板 -->
		<version.template.file>src/main/resources/build_version.properties</version.template.file>
		<!-- 文件拷贝时的编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- 编译时的编码 -->
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
	</properties>


	<!-- 依赖项目 -->
	<dependencies>
		<dependency>
			<groupId>phanta.dal</groupId>
			<artifactId>GameCore</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>phanta.dal</groupId>
			<artifactId>GameData</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>phanta.dal</groupId>
			<artifactId>Message</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>phanta.dal</groupId>
			<artifactId>DalUtils</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>phanta.dal</groupId>
			<artifactId>GMUtils</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.44</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.13</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpasyncclient</artifactId>
			<version>4.1.3</version>
		</dependency>


		<!-- Commons Lang, a package of Java utility classes for the classes that 
			are in java.lang's hierarchy, or are considered to be so standard as to justify 
			existence in java.lang. -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>

		<!-- redis operaion -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- redis operaion end -->

		<!-- kafka -->
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<version>0.9.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.jetlang</groupId>
			<artifactId>jetlang</artifactId>
			<version>0.2.9</version>
		</dependency>

		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>2.2.3</version>
		</dependency>

		<!-- <dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>3.3.4</version>
		</dependency> -->
	</dependencies>

	<build>
		<!-- 重写文件名有几率会造成某些IDE不能热更新 -->
		<finalName>${project.artifactId}_${git.commit.time}_${git.commit.id.abbrev}</finalName>
		<!-- 默认源代码和资源文件目录配置 源代码默认只支持配置一个,资源支持多个 -->
		<!-- 源代码目录 -->
		<sourceDirectory>src/main/java</sourceDirectory>
		<!-- 测试源代码目录 不会打包 -->
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<!-- 资源路径 资源路径可以配置多个 -->
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<excludes>
					<exclude>start.py</exclude>
					<exclude>build_version.properties</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>

		<!-- <pluginManagement> -->
		<!-- 插件配置 -->
		<plugins>
			<!-- git-commit-id-plugin获取git提交版本号插件 -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>2.1.5</version>
				<executions>
					<execution>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyyMMddHHmm</dateFormat>
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<skipPoms>false</skipPoms>
					<failOnNoGitDirectory>true</failOnNoGitDirectory>
					<gitDescribe>
						<skip>false</skip>
						<always>false</always>
						<abbrev>7</abbrev>
						<dirty>-dirty</dirty>
						<forceLongFormat>false</forceLongFormat>
					</gitDescribe>
				</configuration>
			</plugin>
			<!-- build-helper-maven-plugin, 设置多个源文件夹 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<!-- 我们可以通过在这里添加多个source节点，来添加任意多个源文件夹 -->
					<!-- mvn idea:idea 或者 mvn eclipse:eclipse 则不需要在IDE中设置源文件了 -->
					<!-- <execution> <id>add-source</id> <phase>generate-sources</phase> 
						<goals> <goal>add-source</goal> </goals> <configuration> <sources> <source>${basedir}/scripts/java/</source> 
						</sources> </configuration> </execution> -->
					<execution>
						<id>add-resource</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${basedir}/src/main/resources</directory>
									<filtering>true</filtering>
									<includes>
										<include>build_version.properties</include>
									</includes>
									<excludes>
										<exclude>**/*.py</exclude>
									</excludes>
								</resource>
								<resource>
									<directory>${basedir}/src/main/resources</directory>
									<excludes>
										<exclude>**/*.py</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 项目依赖插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<outputDirectory>${project.build.directory}/lib</outputDirectory>
					<!-- 表示是否不包含间接依赖的包 -->
					<excludeTransitive>false</excludeTransitive>
					<!-- 去除版本信息 -->
					<stripVersion>false</stripVersion>
				</configuration>

				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- 拷贝项目依赖包到lib/目录下 -->
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<excludeTransitive>false</excludeTransitive>
							<stripVersion>false</stripVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 项目资源插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<!--拷贝配置文件 -->
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<!-- 拷贝项目*/config目录下所有文件到*/config/目录下 -->
							<outputDirectory>${project.build.directory}/config</outputDirectory>
							<resources>
								<resource>
									<directory>config</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-sqls</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<!-- 拷贝项目*/config目录下所有文件到*/sql/目录下 -->
							<outputDirectory>${project.build.directory}/sql</outputDirectory>
							<resources>
								<resource>
									<directory>sql</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-xmls</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/java</directory>
									<includes>
										<include>**/*.xml</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-script</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<!-- 拷贝项目*/config目录下所有文件到*/scripts/目录下 -->
							<outputDirectory>${project.build.directory}/scripts</outputDirectory>
							<resources>
								<resource>
									<directory>scripts</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-csv</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<!-- 拷贝项目*/bytes目录下所有文件到*/bytes/目录下 -->
							<outputDirectory>${project.build.directory}/csv</outputDirectory>
							<resources>
								<resource>
									<directory>csv</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 打包插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<!-- 生成MANIFEST.MF的设置 -->
						<manifest>
							<!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<!-- jar启动入口类 -->
							<mainClass>Main</mainClass>
						</manifest>
						<manifestEntries>
							<!-- 在Class-Path下添加配置文件的路径 -->
							<Class-Path>config/</Class-Path>
						</manifestEntries>
					</archive>
					<!-- <includes> <include>**/*.class</include> <include>**/*.xml</include> 
						</includes> -->
					<excludes>
						<exclude>**/*.py</exclude>
						<!-- 针对classloader进行的优化 -->
						<!-- 避免人为的进行ide环境添加,造成appclasser中出现脚本类 -->
						<!-- 强制不打包的处理可以打包即使在代码中强制调用,也会报错的目的. -->
						<!-- 详见"服务器热更新方案关于IDE的部分" -->
						<exclude>scripts/*</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- 编译插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<tasks>
						<if>
							<contains string="${os.name}" substring="Windows" />
							<then>
								<compilerArguments>
									<verbose />
									<!-- 分隔符受运行系统影响，Windows（分隔符英文分号）linux(分隔符英文冒号) -->
									<bootclasspath>${java.home}/lib/rt.jar;${java.home}/lib/jce.jar</bootclasspath>
								</compilerArguments>
							</then>
							<else>
								<compilerArguments>
									<verbose />
									<!-- 分隔符受运行系统影响，Windows（分隔符英文分号）linux(分隔符英文冒号) -->
									<bootclasspath>${java.home}/lib/rt.jar:${java.home}/lib/jce.jar</bootclasspath>
								</compilerArguments>
							</else>
						</if>
					</tasks>
				</configuration>
			</plugin>
		</plugins>
		<!--</pluginManagement> -->
	</build>
</project>
