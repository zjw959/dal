<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>phanta.dal</groupId>
        <artifactId>DAL</artifactId>
        <version>1.0.0</version>
    </parent>
    <packaging>jar</packaging>
    <artifactId>FightServer</artifactId>

    <properties>
        <!-- 启动文件模板 -->
        <start.template.file>src/main/resources/start.py</start.template.file>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
    		<dependency>
            <groupId>phanta.dal</groupId>
            <artifactId>GameCore</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>phanta.dal</groupId>
            <artifactId>GameData</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>phanta.dal</groupId>
            <artifactId>Message</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <version>0.9.0.0</version>
        </dependency>        
        <dependency>
              <groupId>phanta.dal</groupId>
              <artifactId>DalUtils</artifactId>
              <version>1.0.0</version>
        </dependency>
  </dependencies>
  
  <build>
        <!-- 重写文件名有几率会造成某些IDE不能热更新 -->
        <finalName>${project.artifactId}.${project.version}</finalName>
        <!-- 默认源代码和资源文件目录配置 源代码默认只支持配置一个,资源支持多个 -->
        <!-- 源代码目录 -->
        <sourceDirectory>src/main/java</sourceDirectory>
        <!-- 测试源代码目录 不会打包 -->
        <testSourceDirectory>src/test/java</testSourceDirectory>
        <!-- 资源路径 资源路径可以配置多个 -->
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <excludes>
                    <exclude>start.py</exclude>
                </excludes>
            </resource>
        </resources>

        <!-- <pluginManagement> -->
        <!-- 插件配置 -->
        <plugins>
            <!-- build-helper-maven-plugin, 设置多个源文件夹 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <!-- 我们可以通过在这里添加多个source节点，来添加任意多个源文件夹 -->
                    <!-- mvn idea:idea 或者 mvn eclipse:eclipse 则不需要在IDE中设置源文件了 -->
                    <!-- <execution> <id>add-source</id> <phase>generate-sources</phase> 
                        <goals> <goal>add-source</goal> </goals> <configuration> <sources> <source>${basedir}/scripts/java/</source> 
                        </sources> </configuration> </execution> -->
                    <execution>
                        <id>add-resource</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>add-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/resources</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>git.properties</include>
                                    </includes>
                                    <excludes>
                                        <exclude>**/*.py</exclude>
                                    </excludes>
                                </resource>
                                <resource>
                                    <directory>${basedir}/src/main/resources</directory>
                                    <excludes>
                                        <exclude>**/*.py</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 项目依赖插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                    <!-- 表示是否不包含间接依赖的包 -->
                    <excludeTransitive>false</excludeTransitive>
                    <!-- 去除版本信息 -->
                    <stripVersion>false</stripVersion>
                </configuration>

                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- 拷贝项目依赖包到lib/目录下 -->
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <excludeTransitive>false</excludeTransitive>
                            <stripVersion>false</stripVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 项目资源插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <!--拷贝配置文件 -->
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <!-- 拷贝项目*/config目录下所有文件到*/config/目录下 -->
                            <outputDirectory>${project.build.directory}/config</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>config</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-xmls</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/java</directory>
                                    <includes>
                                        <include>**/*.xml</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-script</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <!-- 拷贝项目*/config目录下所有文件到*/scripts/目录下 -->
                            <outputDirectory>${project.build.directory}/scripts</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>scripts</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-csv</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <outputDirectory>${project.build.directory}/csv</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>csv</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 打包插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <!-- 生成MANIFEST.MF的设置 -->
                        <manifest>
                            <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- jar启动入口类 -->
                            <mainClass>Main</mainClass>
                        </manifest>
                        <manifestEntries>
                            <!-- 在Class-Path下添加配置文件的路径 -->
                            <Class-Path>config/</Class-Path>
                        </manifestEntries>
                    </archive>
                    <!-- <includes> <include>**/*.class</include> <include>**/*.xml</include> 
                        </includes> -->
                    <excludes>
                        <exclude>**/*.py</exclude>
                        <!-- 针对classloader进行的优化 -->
                        <!-- 避免人为的进行ide环境添加,造成appclasser中出现脚本类 -->
                        <!-- 强制不打包的处理可以打包即使在代码中强制调用,也会报错的目的. -->
                        <!-- 详见"服务器热更新方案关于IDE的部分" -->
                        <exclude>scripts/*</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                    <tasks>
                        <if>
                            <contains string="${os.name}" substring="Windows" />
                            <then>
                                <compilerArguments>
                                    <verbose />
                                    <!-- 分隔符受运行系统影响，Windows（分隔符英文分号）linux(分隔符英文冒号) -->
                                    <bootclasspath>${java.home}/lib/rt.jar;${java.home}/lib/jce.jar</bootclasspath>
                                </compilerArguments>
                            </then>
                            <else>
                                <compilerArguments>
                                    <verbose />
                                    <!-- 分隔符受运行系统影响，Windows（分隔符英文分号）linux(分隔符英文冒号) -->
                                    <bootclasspath>${java.home}/lib/rt.jar:${java.home}/lib/jce.jar</bootclasspath>
                                </compilerArguments>
                            </else>
                        </if>
                    </tasks>
                </configuration>
            </plugin>
        </plugins>
        <!--</pluginManagement> -->
    </build>
</project>
